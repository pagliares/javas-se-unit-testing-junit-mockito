package org.example;

import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class RepeatedTestsExample {
    private Calculator calculator;

    @BeforeEach
    void setUp() {
        System.out.println("Executing @BeforeEach method.");
        calculator = new Calculator();
    }

    @DisplayName("4/0")
    //@Test
    // @RepeatedTest(3) - The example below show how customize the information shown when running the test case
    @RepeatedTest(value = 3, name="{displayName}. Repetition {currentRepetition} of " +
                        "{totalRepetitions}")
    void testPerformIntegerDivision_When_FourIsDividedByZero_ShouldThrowArithmeticException(RepetitionInfo repetitionInfo,
                                                                                            TestInfo testInfo) {
        System.out.println("Test 4/0");
        System.out.println("Running " + testInfo.getTestMethod().get().getName());
        System.out.println("Repetition #" + repetitionInfo.getCurrentRepetition() +
                " of " + repetitionInfo.getTotalRepetitions());

        // Arrange (Given)
        int dividend = 4;
        int divisor = 0;
        int expectedResult = 0;
        // This is the message (/ by zero) generated by the Java Runtime Environment
        // when we try to divide by zero
        String expectedExceptionMessage = "/ by zero";
        // Act (When) and Assert (Then)
        ArithmeticException actualException = assertThrows(ArithmeticException.class,
                () -> calculator.performIntegerDivision(dividend, divisor),
                "4/0 should throw ArithmeticException");

        // Assert (Then)
        assertEquals(expectedExceptionMessage, actualException.getMessage(), ()-> "Unexpected exception message");
    }

    @AfterEach
    void tearDown() {
        System.out.println("Executing @AfterEach method.");
    }
}
